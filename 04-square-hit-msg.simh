# [定数]
# "HIT "
d -a 00 H
d -a 01 I
d -a 02 T
d    03 40
d    04 0

# [メイン処理]
# 0o1000をACレジスタの下位12ビットへ設定
d -m 100 law 1000
# ACレジスタの下位12ビットを描画処理の開始アドレスとして設定し、描画処理を開始
d -m 101 idla
# ライトペンが描画箇所に触れていたら次の命令をスキップ
d -m 102 idsp
# - 触れていない場合: 触れている場合の処理を飛ばす
d -m 103 jmp 105
# - 触れている場合: 触れている場合の処理へジャンプ
d -m 104 jmp 110
# STOP割り込みが設定されていたら次の命令をスキップ
d -m 105 idsi
# - 設定されていない場合: 描画開始直後の処理まで戻る
d -m 106 jmp 102
# - 設定されている場合: 最初へ戻る
d -m 107 jmp 100
# 描画箇所に触れている場合の処理
# - ACレジスタへ0(アドレス0o160の値)を設定
d -m 110 lac 160
# - ACレジスタで指定されたアドレスの文字列を出力
d -m 111 jms 400
# - ヒット割り込みをクリア
d -m 112 idrs
# - 描画開始直後の処理まで戻る
d -m 113 jmp 102
# メイン処理内定数
# - 定数0
d 160 0

# [Type 340処理]
# パラメータモード: 単位量:1、輝度:7(最大)
d 1000 020117
# ポイントモード: X座標:0o1000
d 1001 021000
# ポイントモード: Y座標:0o1000
d 1002 301000
# ベクタモード: 線の描画:有り、X座標:+0o100、Y座標:+0
d 1003 200100
# ベクタモード: 線の描画:有り、X座標:+0、Y座標:+0o100
d 1004 240000
# ベクタモード: 線の描画:有り、X座標:-0o100、Y座標:+0
d 1005 200300
# ベクタモード: 線の描画:有り、X座標:+0、Y座標:-0o100
d 1006 740000
# パラメータモード: 描画停止、STOP割り込み設定
d 1007 003000

# [300: 指定された1文字を出力する関数]
# ACレジスタに設定されている文字(ASCII)を出力する
# - 文字出力完了フラグをクリア
d -m 301 tcf
# - ACレジスタの文字を出力バッファへ設定
d -m 302 tls
# - 文字出力完了フラグがセットされていれば次の命令をスキップ
d -m 303 tsf
# - TSF命令へ戻る
d -m 304 jmp 303
# - return
d -m 305 jmp i 300

# [400: 指定された文字列を出力する関数]
# ACレジスタにアドレスで指定されている文字列を出力する
# - ACレジスタの値(文字列の先頭アドレス)をアドレス0o460へ書き込み
d -m 401 dac 460
# - アドレス0o460に書かれているアドレスから次の文字をACレジスタへ取得
d -m 402 lac i 460
# - 取得した文字が0(NULL)なら次の命令をスキップ
d -m 403 sza
# - NULLでないなら、文字出力へ
d -m 404 jmp 406
# - return
d -m 405 jmp i 400
# - ACレジスタに設定されている文字を出力する関数呼び出し
d -m 406 jms 300
# - アドレス0o460の値(今出力した文字のアドレス)をACレジスタへ設定
d -m 407 lac 460
# - ACレジスタへ定数1を加算(アドレスを次の文字へ進める)
d -m 410 add 461
# - ACレジスタの値をアドレス0o460へ書き戻す
d -m 411 dac 460
# - 次の文字の取得へ戻る
d -m 412 jmp 402
# 関数内変数/定数
# - 460: 次に出力する文字のアドレス
# - 定数1
d 461 1

# [実行]
# GRAPHICS-2シミュレーションの無効化
set g2out disabled
# ベクタースキャンディスプレイシミュレーションの有効化
set dpy enabled
# メイン処理を実行
go 100

# [終了]
by
